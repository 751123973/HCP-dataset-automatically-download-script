import boto3
import os
import logging
import datetime
import threading
import time
import re
from copy import deepcopy

# Set parameters
bucketName = 'hcp-openaccess'
prefix = 'HCP_1200'
outputPath =  'G:\\'
cntList = 0

theTime = datetime.datetime.now().strftime('%Y-%m-%d-%H_%M_%S')
os.makedirs(theTime)

logger = logging.getLogger('script')
formatter = logging.Formatter('%(asctime)s[line:%(lineno)d] - %(levelname)s: %(message)s')
logger.setLevel(level = logging.DEBUG)
logger.propagate = False

file_handler = logging.FileHandler('./{}/INFO.log'.format(theTime))
file_handler.setLevel(level = logging.INFO)
file_handler.setFormatter(formatter)

warning_handler = logging.FileHandler('./{}/WARNING.log'.format(theTime))
warning_handler.setLevel(level = logging.WARNING)
warning_handler.setFormatter(formatter)

stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.INFO)
stream_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(warning_handler)
logger.addHandler(stream_handler)



PendingList = []
def get_List(num, bucket, subjectsList):
    cntPending = 0
    logger.info('GetList Thread has been init!')
    while True:
        if len(PendingList) < num and cntPending < len(subjectsList):
            keyList = bucket.objects.filter(Prefix = prefix + '/{}/MNINonLinear/Results/tfMRI'.format(subjectsList[cntPending]))
            keyList = [key.key for key in keyList]
            keyList = [x for x in keyList if 'LR' not in x and 'RL' not in x and 'var' not in x]
            keyList = [x for x in keyList if 'Contrasts' in x or re.search('cope[\d]\.dtseries\.nii$', x)]
            keyList.sort()
            PendingList.append(keyList)
            cntPending += 1

def download_process(bucket, downloaded, outputPath):
    logger.info('Download Thread has been init!')
    while True:
        if len(PendingList) != 0:
            download_subject(bucket, outputPath)
            downloaded += 1
            logger.info('%s subjects have been downloaded!', downloaded)


def download_subject(bucket, output_path):
    # Get the target file list
    keyList = PendingList[0]
    PendingList.pop()
    subject_number = keyList[0].split('/')[1]

    if not os.path.exists(output_path):
        os.makedirs(output_path)
        
    totalNumber = len(keyList)
    trycnt = 0
    hasError = False

    logger.info('%s: Begin to download %d keys', subject_number, totalNumber)
    for idx, tarPath in enumerate(keyList):
        downloadPath = os.path.join(output_path, tarPath)
        downloadDir = os.path.dirname(downloadPath)
        if not os.path.exists(downloadDir):
            os.makedirs(downloadDir)
        while trycnt < 10:
            try:
                if not os.path.exists(downloadPath):
                    bucket.download_file(tarPath, downloadPath)
#                    logger.info('%s: %s downloaded!  %d/%d', subject_number, tarPath.split('/')[-1], idx + 1, totalNumber)
#                else:
#                    logger.info('%s: %s already exists!  %d/%d', subject_number, tarPath.split('/')[-1], idx + 1, totalNumber)
                if (idx + 1)%(totalNumber//4) == 0:
                    logger.info('%s: %.2f%% downloaded!', subject_number, (float((idx + 1)/totalNumber) * 100))
                if trycnt > 0:
                    ('%s: %s downloded!  %d/%d', subject_number, tarPath.split('/')[-1], idx + 1, totalNumber)
                trycnt = 0
                break
            except Exception as exc:
                trycnt += 1
                logger.error('%s: %s error!  %d/%d (%s tries)', subject_number, tarPath.split('/')[-1], idx + 1, totalNumber, trycnt)
                logger.error('{}'.format(str(exc)))
        if trycnt == 10:
            hasError = True
            logger.error('%s: %s did not download!', subject_number, tarPath.split('/')[-1])
            
    logger.info('%s completed!', subject_number)
    
    if hasError == False:
        with open('./downloaded.txt', 'a') as fa:
            fa.write(subject_number + '\n')

if __name__ == '__main__':
    # Create bucket
    logger.info('Loading...')
    # Init variable
    boto3.setup_default_session()
    s3 = boto3.resource('s3')
    bucket = s3.Bucket(bucketName)
    logger.info('Bucket built!')

    downloadedList = []
    subjectsList = []

    if not os.path.exists('./downloaded.txt'):
        fw = open('./downloaded.txt', 'w')
        fw.close()

    with open('./downloaded.txt', 'r') as fr:
        for subject_number in fr.readlines():
            subject_number = subject_number.strip()
            downloadedList.append(subject_number)

    downloaded = len(downloadedList)

    with open('./subjects.txt', 'r') as fr:
        for subject_number in fr.readlines():
            subject_number = subject_number.strip()
            if subject_number in downloadedList:
                logger.warning('%s already downloaded', subject_number)
                continue
            subjectsList.append(subject_number)

    logger.info('MultiTheead strating...')
    p1 = threading.Thread(target=get_List, args=(3, bucket, subjectsList,))
    p2 = threading.Thread(target=download_process, args=(bucket, downloaded, outputPath,))
    p1.start()
    p2.start()

    p1.join()
    p2.join()
